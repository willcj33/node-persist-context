const server = require('./test-service.js');
const config = require('./testConfig.json');
const request = require('supertest')('http://' + config.host + ':' + config.port);

suite('Set of functional tests testing basic working functionality for the restify service abstraction class.', () => {
    test('Test the /health endpoint on the test-service and make sure we get a 200', done => {
        request
            .get('/health')
            .set('Accept', 'application/json')
            .expect(200, done);
    });

    test('Test the /test endpoint on the test-service and make sure we get a 200 with an object with key = foo and val = "bar"', done => {
        request
            .get('/test')
            .set('Accept', 'application/json')
            .expect(200, { foo: 'bar' }, done);
    });

    test('Test the /test-metricBuilder endpoint to make sure we all good in the hood.', done => {
        request
            .get('/test-metricBuilder')
            .set('Accept', 'application/json')
            .expect(200, { foo: 'bar' }, done);
    });
	
	test('Test the /test-schema endpoint for a 200 status with valid data.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 ],
				anObject: {}
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})
	
	test('Test the /test-schema endpoint for a 200 status with valid data 2.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})
	
	test('Test the /test-schema endpoint for a 400 status with an invalid number.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: "not a number",
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})
	
	test('Test the /test-schema endpoint for a 400 status with too small a number.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: -1,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})
	
	test('Test the /test-schema endpoint for a 400 status with too large a number.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 101,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 200 status with valid enum number.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 99,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aNumberEnum: 3
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid enum number.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 99,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aNumberEnum: 4
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: 4,
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with too small a string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "h",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with too large a string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world this is supposed to be a really long piece of text.",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 200 status with a valid pattern matching string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aRegex: "Hello World"
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid pattern matching string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world.",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aRegex: "hey, Helloworld !"
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 200 status with a valid enum string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world.",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aStringEnum: "mambo"
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid enum string.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world.",
				aDate: "2016-09-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5,
				aStringEnum: "jets"
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid date.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "hello",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with too small a date.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-11-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with too large a date.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-01-11",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 200 status with a string timestamp date.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "1473947059515",
				aBool: false,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(200, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid bool.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: 5,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid array.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: {},
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with tool small an array.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with too large an array.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 , 4 , 5 , 6 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with invalid children of an array.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ "hey" , "yo" , 3 , 4 ],
				anObject: {
					yo: "hey"
				},
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid object.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: [],
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid object 2.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: 2,
				notRequired: 5
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an invalid object 3.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: 2,
				notRequired: "hey"
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})

	test('Test the /test-schema endpoint for a 400 status with an non-required number out of range.', done => {
		request
			.post('/test-schema')
			.send({
				aNumber: 3,
				aString: "hello world",
				aDate: "2016-09-11",
				aBool: true,
				anArray: [ 1 , 2 , 3 , 4 ],
				anObject: {},
				notRequired: 7
			})
			.set('Accept', 'application/json')
			.expect(400, done);
	})
});