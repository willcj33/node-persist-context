"use strict";

const assert = require('assert');
const config = require('./testConfig.json');
const BaseService = require('./../service.js');
const l = require('geofeedia-lumberjack');
var request = require('supertest');

suite('Set of unit tests testing individual functions of the service class.', () => {
    var service;

    test('Create new instance of Service and make sure it\'s configured correctly.', done => {
        service = new BaseService({
            serviceName: 'test-service',
            version: '0.0.2',
            host: '127.0.0.1',
            port: 8079,
            logging: {
                loggers: 'pretty',
                pretty: {
                    minLevel: 30
                }
            }
        });

        assert(service._serviceName === 'test-service', 'Service name is configured correctly.');
        assert(service._host === '127.0.0.1', 'Service host is configured correctly.');
        assert(service._port == 8079, 'Service port is configured correctly.');
        assert(service._logger instanceof l.Lumberjack, 'Service port is configured correctly.');
        assert(service._server.versions === '0.0.2', 'Service version is configured correctly.');
        done();
    });

    test('Register custom middleware and verify that it was added. Also check to make sure reference to service is returned.', done => {
        let middlewareCount = service._middleware.length;

        let test_ref = service.registerMiddleware((req, res, next) => {
            req.params.foo = 'bar';
            next();
        });

        assert(middlewareCount + 1 === service._middleware.length, 'Middleware was successfully added to service\'s list of middleware.');
        assert(test_ref instanceof BaseService && test_ref._serviceName === service._serviceName, 'Returned service reference seems to correct.');

        done();
    });

    test('Register custom route(s) and verify that it was added. Also check to make sure reference to service is returned.', done => {
        let routeCount = service._routes.length;

        let test_ref = service.register([{
            type: BaseService.ACTION_TYPES.GET,
            route: '/test',
            handler: (req, res, next) => {
                res.send(200, req.params);
            }
        }]);

        assert(routeCount + 1 === service._routes.length, 'Route was successfully added to service\'s list of routes.');
        assert(test_ref instanceof BaseService && test_ref._serviceName === service._serviceName, 'Returned service reference seems to correct.');

        done();
    });

    test('Start server and verify that it is running. Also ensures that the health check endpoint is registered. Also check to make sure reference to service is returned.', done => {
        let test_ref = service.start();

        assert(test_ref instanceof BaseService && test_ref._serviceName === service._serviceName, 'Returned service reference seems to correct.');

        request = request('http://127.0.0.1:8079');
        request
            .get('/health')
            .set('Accept', 'application/json')
            .expect(200, done);
    });

    test('Call custom route and verify both that the route is properly executed and also that custom middleware is being hit.', done => {
        request
            .get('/test')
            .set('Accept', 'application/json')
            .expect(200, { foo: 'bar' }, done);
    });

    test('Stop server and verify that it is not running.', done => {
        let test_ref = service.stop();

        assert(test_ref instanceof BaseService && test_ref._serviceName === service._serviceName, 'Returned service reference seems to correct.');

        request
            .get('/health')
            .set('Accept', 'application/json')
            .end((err, res) => {
                assert(err !== undefined, 'Request couldn\'t reach server.');
                done();
            });
    });
});