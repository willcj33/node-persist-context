"use strict";

const restify           = require('restify');
const uuid              = require('node-uuid');
const l                 = require('geofeedia-lumberjack');
const _                 = require('lodash');
const loggingMiddleware = require('./http-middleware/loggingMiddleware');
const validateParams    = require('./utils/validateJSON');

class Service {
    constructor (config) {
        let self = this;

        //Setup config defaults and extend it with passed config
        let defaultConfig = {
            serviceName: 'generic-service',
            version: '0.1.0',
            host: '127.0.0.1',
            port: 8083,
            logging: {
                loggers: 'fluent,pretty',
                fluent: {
                    host: "localhost",//"k8s-proxy.qa1.us-east-1.local", //This is the qa fluent host
                    port: 8077,//31442, //This is the qa fluent port
                    timeout: 3.0,
                    minLevel: 30
                },
                pretty: {
                    minLevel: 30
                }
            }
        };

        config = _.merge({}, defaultConfig, config);

        //Service name and stuff
        self._serviceName = process.env.SERVICE_NAME || config.serviceName;
        let baseEnv = self._serviceName.toLocaleUpperCase().replace(/\-/g, '_');
        self._host = process.env[baseEnv + '_BIND_HOST'] || config.host;
        self._port = process.env[baseEnv + '_BIND_PORT'] || config.port;

        //Logging
        let logWriters = [];
        config.logging.loggers = process.env[baseEnv + '_LOGGERS'] || config.logging.loggers;
        config.logging.loggers.split(',').forEach(lw => logWriters.push({ type: l.LOGGERS[lw.toUpperCase()], minLevel: config.logging[lw].minLevel || 30, config: config.logging[lw] }));
        self._logger = new l.Lumberjack('com.geofeedia.service.' + self._serviceName, {
            service: self._serviceName,
            loggers: logWriters
        }, [
            new l.LogClause('placement.cloud', l.TYPES.STRING, process.env.PLACEMENT_CLOUD || ''),
            new l.LogClause('placement.region', l.TYPES.STRING, process.env.PLACEMENT_REGION || ''),
            new l.LogClause('placement.zone', l.TYPES.STRING, process.env.PLACEMENT_ZONE || ''),
            new l.LogClause('placement.hostname', l.TYPES.STRING, process.env.PLACEMENT_HOSTNAME || ''),
            new l.LogClause('placement.instanceid', l.TYPES.STRING, process.env.PLACEMENT_INSTANCE_ID || ''),
            new l.LogClause('placement.podname', l.TYPES.STRING, process.env.PLACEMENT_POD_NAME || '')
        ]);

        //Create actual service object
        self._server = restify.createServer({
            name: self._serviceName,
            version: config.version
        });

        //Other stuff
        self._routes = [];
        self._middleware = [
            restify.acceptParser(self._server.acceptable),
            restify.dateParser(),
            restify.queryParser(),
            restify.gzipResponse(),
            restify.bodyParser(),
            restify.CORS(),
            loggingMiddleware.requestLogger({
                logger: self._logger
            })
        ];
    }

    _bindEvents () {
        let self = this;

        process.on('exit', function (code) {
            switch(code) {
                case 1:
                    self._logger.log(new Error('Uncaught Fatal Exception'));
                    break;
                case 3:
                    self._logger.log(new Error('Internal JavaScript Parse Error'));
                    break;
                case 4:
                    self._logger.log(new Error('Internal JavaScript Evaluation Failure'));
                    break;
                case 5:
                    self._logger.log(new Error('Fatal Error'));
                    break;
                case 6:
                    self._logger.log(new Error('Non-function Internal Exception Handler'));
                    break;
                case 7:
                    self._logger.log(new Error('Internal Exception Handler Run-Time Failure'));
                    break;
                case 9:
                    self._logger.log(new Error('Invalid Argument'));
                    break;
                case 10:
                    self._logger.log(new Error('Internal JavaScript Run-Time Failure'));
                    break;
                case 12:
                    self._logger.log(new Error('Invalid Debug Argument'));
                    break;
            }
        });

        process.on('beforeExit', function () {
            ///TODO: add some code to execute before exit (maybe db connection closing?)
        });

        process.on('uncaughtException', function (err) {
            self._logger.log(err);
            ///TODO: Cleanup app stuff here
            process.exit(7);
        });

        process.on('SIGHUP', function () {
            ///TODO: clean up app before exit
            process.exit();
        });

        process.on('SIGINT', function () {
            ///TODO: clean up app before exit
            process.exit();
        });

        self._server.on('after', function (req, res, route, error) {
            loggingMiddleware.responseLogger(req, res, route, error);
        });

        self._server.on('NotFound', function (req, res, error, cb) {
            let transactionId = req.header('X-Transaction-ID', uuid.v4());
            let requestId = req.header('X-Request-ID', uuid.v4());
            let sourceId = req.header('X-Source-ID', -1);
            self._logger.log(
                self._logger
                    .createLog()
                    .addString('request.method', req.method)
                    .addString('request.path', req.url)
                    .addLong('transaction.id', transactionId)
                    .addLong('request.id', requestId)
                    .addLong('source.id', sourceId)
                    .addInt('request.status', 404)
            );
            res.send(404);
        });
    }

    _registerMiddleware () {
        let self = this;

        self._middleware.forEach(m => self._server.use(m));
    }

    _registerRoutes () {
        let self = this;

        self._server.get('/health', (req, res, next) => {
            res.send(200, 'ok');
            return next();
        });

        self._routes.forEach(r => {
            if(r.hasOwnProperty('register') && typeof r.register === 'function') {
                r.register(self._server);
            } else if (r.hasOwnProperty('type')) {
                if(r.hasOwnProperty('schema')) {
                    self._server[r.type](r.route, (req, res, next) => {
                        if(validateParams(r.schema, req.params)) {
							r.handler(req, res, next);
						} else {
							res.send(400, "Bad Request.");
							next();
						}
                    });
                } else {
                    self._server[r.type](r.route, r.handler);
                }
            }
        });
    }

    registerMiddleware (middleware) {
        let self = this;

        self._middleware.push(middleware);

        return this;
    }

    register (routes) {
        let self = this;

        if(Array.isArray(routes) && routes.length) {
            self._routes = self._routes.concat(routes);
        } else if (typeof routes === 'object') {
            self._routes.push(routes);
        }

        return this;
    }

    start () {
        let self = this;

        self._bindEvents();
        self._registerMiddleware();
        self._registerRoutes();

        self._server.listen(self._port, self._host, function () {
            self._logger.log('Service running, listening on ' + self._server.url);
        });

        return this;
    }

    stop () {
        let self = this;

        self._server.close(() => {
            self._logger.log('Server closed.');
        });

        return this;
    }

    static get ACTION_TYPES () {
        return {
            GET: 'get',
            POST: 'post',
            PUT: 'put',
            DEL: 'del'
        };
    }
}

module.exports = Service;