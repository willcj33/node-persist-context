"use strict";

var uuid = require('node-uuid');

var l = require('geofeedia-lumberjack');

module.exports = {};
module.exports.requestLogger = requestLogger;
module.exports.responseLogger = responseLogger;

class MetricBuilder {
	constructor (logger) {
		let self = this;

		self.logger = logger;
		self.log = logger.createLog();
		self.timings = {};
	}

	startTimer (name) {
		this.timings[name] = { start: new Date().getTime() };
	}

	finishTimer (name) {
		if(this.timings.hasOwnProperty(name)) {
			this.timings[name].end = this.timings[name].end ? this.timings[name].end : new Date().getTime();
		}		
	}

	write () {
		if (Object.keys(this.timings).length === 0) return false;

		for(let k in this.timings) {
			if(this.timings.hasOwnProperty(k)) {
				this.log.addLong(`${k}.start`, this.timings[k].start).addInt(`${k}.took`, (this.timings[k].end - this.timings[k].start)).addLong(`${k}.end`, this.timings[k].end);
			}
		}
		this.logger.log(this.log);
	}
}

function requestLogger(config) {
    return function (req, res, next) {

		let transactionId = req.header('X-Transaction-ID', uuid.v4());
		let requestId = req.header('X-Request-ID', uuid.v4());
		let sourceId = req.header('X-Source-ID', -1);

		let startTime = new Date().getTime();
		req.metrics = { startTime: startTime };
		req.logger = config.logger.createChildLogger('requestLogger', [
			new l.LogClause('transaction.id', l.TYPES.STRING, transactionId),
			new l.LogClause('request.id', l.TYPES.STRING, requestId),
			new l.LogClause('source.id', l.TYPES.STRING, sourceId)
		]);

		req.metricBuilder = new MetricBuilder(req.logger.createChildLogger('metricBuilder'));

		req.logger.log(
			req.logger
				.createLog()
				.addLong('starttime', startTime)
				.addString('request.body', req.params.jwt)
				.addString('request.type', req.method)
				.addString('request.path', req.path())
		);
		next();
    }
}

function responseLogger(req, res, route, error) {
	let endTime = new Date().getTime();
	let startTime = (req.metrics) ? req.metrics.startTime : 0;
	if(req.logger) {
		req.metricBuilder.write();
		req.logger.log(
			req.logger.createLog()
				.addString('request.status', res.statusCode)
				.addLong('request.took', endTime - startTime)
				.addLong('request.endtime', endTime)
		);		
	}
}