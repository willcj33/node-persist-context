"use strict";

const _      = require("lodash");
const moment = require("moment");

const JSON_TYPES = {
    OBJECT: 'object',
    ARRAY: 'array',
    NUMBER: 'number',
    STRING: 'string',
    DATE: 'date',
    BOOL: 'bool',
    UNKNOWN: 'unknown'
};

function validateNumber(reqs, val) {
    if(reqs.required && !val) return false;
    if(!reqs.required && !val) return true;
    if(Number.isNaN(parseInt(val))) return false;
    if((reqs.min || reqs.min === 0) && val < reqs.min) return false;
    if((reqs.max || reqs.max === 0) && val > reqs.max) return false;
    if(reqs.oneOf && _.includes(reqs.oneOf, val) === false) return false;
    return true;
}

function validateString(reqs, val) {
    if(reqs.required && !val) return false;
    if(!reqs.required && !val) return true;
    if(typeof val !== "string") return false;
    if((reqs.minLength || reqs.minLength === 0) && val.length < reqs.minLength) return false;
    if((reqs.maxLength || reqs.maxLength === 0) && val.length > reqs.maxLength) return false;
    if(reqs.pattern && new RegExp(reqs.pattern).test(val) === false) return false;
    if(reqs.oneOf && _.includes(reqs.oneOf, val) === false) return false;
    return true;
}

function validateBool(reqs, val) {
    if(reqs.required && (val === undefined || val === null)) return false;
    if(!reqs.required && !val) return true;
	if(typeof val !== "boolean") return false;
    return true;
}

function validateDate(reqs, val) {
    if(reqs.required && !val) return false;
    if(!reqs.required && !val) return true;
    if(new RegExp(/^\d+$/gi).test(val)) {
        val = parseInt(val, 10);
    }
    let parsedDate = moment(val);
    if(!parsedDate.isValid()) return false;
    if(reqs.minDate && parsedDate.isBefore(moment(reqs.minDate))) return false;
    if(reqs.maxDate && parsedDate.isAfter(moment(reqs.maxDate))) return false;
    if(reqs.oneOf && _.includes(reqs.oneOf, val) === false) return false;
    return true;
}

function validateArray(reqs, val) {
    if(reqs.required && !val) return false;
    if(!reqs.required && !val) return true;
	if(!Array.isArray(val)) return false;
    if((reqs.minItems || reqs.minItems === 0) && val.length < reqs.minItems) return false;
    if((reqs.maxItems || reqs.maxItems === 0) && val.length > reqs.maxItems) return false;

    return _.reduce(val, (r, v) => {
        return r && validate(reqs.items, v);
    }, true);
}

function validateObject(reqs, val) {
    if(reqs.required && !val) return false;
    if(!reqs.required && !val) return true;
	if(typeof val !== "object" || Array.isArray(val)) return false;

    return _.reduce(reqs.properties, (r, v, k) => {
        return r && validate(v, val[k]);
    }, true);
}

function validate(schema, o) {	
    switch(schema.type) {
        case JSON_TYPES.NUMBER:
            return validateNumber(schema, o);
        case JSON_TYPES.DATE:
            return validateDate(schema, o);
        case JSON_TYPES.STRING:
            return validateString(schema, o);
        case JSON_TYPES.BOOL:
            return validateBool(schema, o);
        case JSON_TYPES.ARRAY:
            return validateArray(schema, o);
        case JSON_TYPES.OBJECT:
            return validateObject(schema, o);
        case JSON_TYPES.UNKNOWN:
            return !schema.required || (schema.required && o !== undefined && o !== null);
        default:
            return true;
    }
}

module.exports = (schema, params) => validate(schema, params);