'use strict';

const Q = require('bluebird');
const _ = require('lodash');

class MockDataService {
    constructor () {
        let self = this;

        self.data = [
            { id: 1, name: 'test 1' },
            { id: 2, name: 'test 2' },
            { id: 3, name: 'test 3' }
        ];
        self.idClock = self.data.length;
    }

    getAll () {
        return new Q((resolve, reject) => {
            resolve(this.data);
        });
    }

    find (id) {
        return new Q((resolve, reject) => {
            resolve(_.find(this.data, o => o.id === id));
        });
    }

    create (item) {
        return new Q((resolve, reject) => {
            this.idClock++;
            item.id = this.idClock;
            this.data.push(item);
            resolve();
        });
    }

    update (id, item) {
        return new Q((resolve, reject) => {
            for(let i = 0; i < this.data.length; i++) {
                if(this.data[i].id === id) {
                    this.data[i] = Object.assign({}, this.data[i], item);
                    break;
                }
            }
            resolve();
        });
    }

    remove (id) {
        return new Q((resolve, reject) => {
            _.remove(this.data, o => o.id === id);
            resolve();
        });
    }
}

module.exports = MockDataService;