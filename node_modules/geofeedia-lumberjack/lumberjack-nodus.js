'use strict';

// ** Dependencies
const _ = require('underscore');
const l = require('./lumberjack');
const util = require('util');
const config = require('./config');

// ** Initialize the Lumberjack Logging Framework
const _loggers = [
    {
        type: l.LOGGERS.FLUENT,
        minLevel: config.logging.fluent.minLevel,
        config: config.logging.fluent
    }
];
const serviceName = (process.env['SERVICE_NAME'] || '').toUpperCase().replace(/-/g, '_');
const useStdout =
    (process.env[serviceName + '_USE_STDOUT'] && process.env[serviceName + '_USE_STDOUT'].toLowerCase() === 'true')
    || (!process.env[serviceName + '_USE_STDOUT'] && config.logging.useStdOut);

if (useStdout) {
    _loggers.push({
        type: l.LOGGERS.PRETTY,
        minLevel: 10,
        config: {}
    });
}

const maxDepthForFlatten = 5;

/**
 * Flatten an object to parent.property name=value pairs.
 * @param o
 * @returns {*|{}}
 */
function flatten(o) {
    var prefix = arguments[1] || "", out = arguments[2] || {}, name, currentDepth = arguments[3] || 1;
    for (name in o) {
        if (o.hasOwnProperty && o.hasOwnProperty(name)) {
            typeof o[name] === "object" && currentDepth <= maxDepthForFlatten ? flatten(o[name], prefix + name + '.', out, currentDepth + 1) :
                out[prefix + name] = o[name];
        }
    }
    return out;
}

/**
 * Creates a new Lumberjack logger instance from a Nodus Provier Definition
 * @param config
 * @returns {*|Lumberjack}
 */
function createLogger(config) {

    // ** Create a new logger instance
    const logger = new l.Lumberjack(
        config.name || 'com.geofeedia.' + serviceName.toLowerCase(),
        {
            service: config.service || serviceName,
            loggers: _loggers
        }, [
            new l.LogClause('placement.cloud', l.TYPES.STRING, process.env.PLACEMENT_CLOUD || ''),
            new l.LogClause('placement.region', l.TYPES.STRING, process.env.PLACEMENT_REGION || ''),
            new l.LogClause('placement.zone', l.TYPES.STRING, process.env.PLACEMENT_ZONE || ''),
            new l.LogClause('placement.hostname', l.TYPES.STRING, process.env.PLACEMENT_HOSTNAME || ''),
            new l.LogClause('placement.instanceid', l.TYPES.STRING, process.env.PLACEMENT_INSTANCE_ID || ''),
            new l.LogClause('placement.podname', l.TYPES.STRING, process.env.PLACEMENT_POD_NAME || ''),
            new l.LogClause('placement.env', l.TYPES.STRING, process.env.PLACEMENT_ENV || '')
        ]);

    // ** Write a nodus log message using lumberjack
    return msg => {

        // ** Create a log entry to send to lumberjack
        const entry = logger.createLog();

        // ** Add a log clause for each property of the message passed in
        _.forEach(flatten(msg), (val, key) => {
            if (util.isString(val))
                return entry.addString(key, val);

            if (util.isNumber(val)) {
                if (Number.isInteger(val))
                    return entry.addLong(key, val);

                return entry.addDouble(key, val);
            }
        });

        // ** Text based message string
        return logger[msg.level](entry);
    };
}

module.exports = createLogger;
